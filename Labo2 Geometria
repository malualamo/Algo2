#include <iostream>

using namespace std;

using uint = unsigned int;

// Ejercicio 1

class Rectangulo {
    public:
        Rectangulo(uint alto, uint ancho);
        uint alto();
        uint ancho();
        float area();

    private:
        int _alto;
        int _ancho;

};

Rectangulo::Rectangulo(uint alto, uint ancho) : _alto(alto), _ancho(ancho) {};

uint Rectangulo::alto() {
    return _alto;
}

uint Rectangulo::ancho() {
    return _ancho;
}

float Rectangulo::area() {
    return _alto*_ancho;
}

// Ejercicio 2

class Elipse {
    public:
        Elipse(uint a, uint b);
        uint r_a();
        uint r_b();
        float area();

    private:
        uint _ra;
        uint _rb;
};

Elipse::Elipse(uint a, uint b) : _ra(a), _rb(b) {}

uint Elipse::r_a() {
    return _ra;
}

uint Elipse::r_b() {
    return _rb;
}

float Elipse::area() {
    float pi = 3.14;
    return pi * _ra * _rb;
}

// Ejercicio 3

class Cuadrado {
    public:
        Cuadrado(uint lado);
        uint lado();
        float area();

    private:
        Rectangulo _r;
};

Cuadrado::Cuadrado(uint lado): _r(lado, lado) {}

uint Cuadrado::lado() {
    return _r.alto();
}

float Cuadrado::area() {
    return _r.area();
}

// Ejercicio 4

// Clase Circulo

class Circulo {
    public:
        Circulo(uint radio);
        uint radio();
        uint area();

    private:
        Elipse _elipse;
};

Circulo::Circulo(uint radio): _elipse(radio,radio){}

uint Circulo::radio(){
    return _elipse.r_a();
}


uint Circulo::area(){
    return _elipse.area();
}



// Ejercicio 5

ostream& operator<<(ostream& os, Rectangulo r) {
    os << "Rect(" << r.alto() << ", " << r.ancho() << ")";
    return os;
}

ostream& operator<<(ostream& os, Elipse e) {
    os << "Elipse(" << e.r_a() << ", " << e.r_b() << ")";
    return os;
}

// Ejercicio 6

ostream& operator<<(ostream& os, Cuadrado c) {
    os << "Cuad(" << c.lado() << ")";
}

ostream& operator<<(ostream& os, Circulo c){
    os << "Circ(" << c.radio() << ")";
}
